From b98933af6d3444e2a175dd791d6b38c172b407eb Mon Sep 17 00:00:00 2001
From: Sven Neumann <neumann@teufel.de>
Date: Mon, 9 Dec 2013 21:36:31 +0100
Subject: [PATCH] Revert "Add dlna namespace only when it's actually used"

This change causes the dlna namespace prefix to be missing
if gupnp_didl_writer_filter() is not being used. This
causes the namespace issues from RFS-4246.

This reverts commit 50a5e45591e7bccb79250502c22233793dc6b2cb.
---
 libgupnp-av/gupnp-didl-lite-resource.c |  5 ++++
 libgupnp-av/gupnp-didl-lite-resource.h |  1 +
 libgupnp-av/gupnp-didl-lite-writer.c   | 45 ++++------------------------------
 3 files changed, 11 insertions(+), 40 deletions(-)

diff --git a/libgupnp-av/gupnp-didl-lite-resource.c b/libgupnp-av/gupnp-didl-lite-resource.c
index 143a3d1..b490cea 100644
--- a/libgupnp-av/gupnp-didl-lite-resource.c
+++ b/libgupnp-av/gupnp-didl-lite-resource.c
@@ -1466,6 +1466,11 @@ gupnp_didl_lite_resource_set_cleartext_size
                               resource->priv->dlna_ns,
                               (unsigned char *) "cleartextSize",
                               (unsigned char *) str);
+                if (resource->priv->dlna_ns) {
+                    xmlNewNs (resource->priv->xml_node,
+                              resource->priv->dlna_ns->href,
+                              GUPNP_DIDL_LITE_RESOURCE_NAMESPACE_DLNA);
+                }
                 g_free (str);
         }
 
diff --git a/libgupnp-av/gupnp-didl-lite-resource.h b/libgupnp-av/gupnp-didl-lite-resource.h
index cec572c..b2bb862 100644
--- a/libgupnp-av/gupnp-didl-lite-resource.h
+++ b/libgupnp-av/gupnp-didl-lite-resource.h
@@ -80,6 +80,7 @@ typedef struct {
         void (* _gupnp_reserved4) (void);
 } GUPnPDIDLLiteResourceClass;
 
+#define GUPNP_DIDL_LITE_RESOURCE_NAMESPACE_DLNA "dlna"
 
 void
 gupnp_didl_lite_resource_set_uri        (GUPnPDIDLLiteResource *resource,
diff --git a/libgupnp-av/gupnp-didl-lite-writer.c b/libgupnp-av/gupnp-didl-lite-writer.c
index 558eb47..9e9780e 100644
--- a/libgupnp-av/gupnp-didl-lite-writer.c
+++ b/libgupnp-av/gupnp-didl-lite-writer.c
@@ -52,8 +52,6 @@ struct _GUPnPDIDLLiteWriterPrivate {
         xmlNs       *pv_ns;
 
         char        *language;
-
-        gboolean    dlna_attr_present;
 };
 
 enum {
@@ -209,19 +207,6 @@ filter_attributes (xmlNode             *node,
 }
 
 static void
-check_dlna_attr (xmlNode             *node,
-                 GUPnPDIDLLiteWriter *writer)
-{
-        xmlAttr *attr;
-
-        /* check if dlna prefix is present for a node */
-        for (attr = node->properties; attr != NULL; attr = attr->next) {
-                if (attr->ns && g_strcmp0 (attr->ns->prefix, "dlna") == 0)
-                        writer->priv->dlna_attr_present = TRUE;
-        }
-}
-
-static void
 filter_node (xmlNode             *node,
              GList               *allowed,
              GUPnPDIDLLiteWriter *writer,
@@ -236,14 +221,10 @@ filter_node (xmlNode             *node,
         if (!tags_only)
                 filter_attributes (node, allowed);
 
-        // Check if dlna namespace attribute is present
-        if (!writer->priv->dlna_attr_present)
-                check_dlna_attr (node, writer);
-
         if (strcmp ((const char *) node->name, "container") == 0) {
-                is_container = TRUE;
-                container_class = xml_util_get_child_element_content (node,
-                                                                      "class");
+            is_container = TRUE;
+            container_class = xml_util_get_child_element_content (node,
+                                                                  "class");
         }
 
         forbidden = NULL;
@@ -298,13 +279,8 @@ apply_filter (GUPnPDIDLLiteWriter *writer,
         g_return_if_fail (GUPNP_IS_DIDL_LITE_WRITER (writer));
         g_return_if_fail (filter != NULL);
 
-        if (filter[0] == '*') {
-                /* Create DLNA namespace as we include anything anyway */
-                xmlNewNs (writer->priv->xml_node,
-                          writer->priv->dlna_ns->href,
-                          writer->priv->dlna_ns->prefix);
+        if (filter[0] == '*')
                 return;         /* Wildcard */
-        }
 
         tokens = g_strsplit (filter, ",", -1);
         g_return_if_fail (tokens != NULL);
@@ -317,12 +293,6 @@ apply_filter (GUPnPDIDLLiteWriter *writer,
              node = node->next)
                 filter_node (node, allowed, writer, tags_only);
 
-        if (writer->priv->dlna_attr_present) {
-                xmlNewNs (writer->priv->xml_node,
-                          writer->priv->dlna_ns->href,
-                          writer->priv->dlna_ns->prefix);
-        }
-
         g_list_free (allowed);
         g_strfreev (tokens);
 }
@@ -409,10 +379,7 @@ gupnp_didl_lite_writer_constructed (GObject *object)
                                   "urn:schemas-upnp-org:metadata-1-0/upnp/",
                                   (unsigned char *)
                                   GUPNP_DIDL_LITE_WRITER_NAMESPACE_UPNP);
-        /* Not adding dlna namespace declaration to any node yet.
-           Add the namespace to Didl-Lite element only if any of the child
-           nodes have dlna namespace prefix attributes */
-        priv->dlna_ns = xmlNewNs (NULL,
+        priv->dlna_ns = xmlNewNs (priv->xml_node,
                                   (unsigned char *)
                                   "urn:schemas-dlna-org:metadata-1-0/",
                                   (unsigned char *)
@@ -432,8 +399,6 @@ gupnp_didl_lite_writer_constructed (GObject *object)
                             (unsigned char *) "lang",
                             (unsigned char *) priv->language);
 
-        priv->dlna_attr_present = FALSE;
-
         object_class = G_OBJECT_CLASS (gupnp_didl_lite_writer_parent_class);
         if (object_class->constructed != NULL)
                 object_class->constructed (object);
-- 
1.8.4.2

