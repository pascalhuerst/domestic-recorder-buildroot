From 02f79741ea6665007afcac0b428628367c97eae0 Mon Sep 17 00:00:00 2001
From: Sven Neumann <neumann@teufel.de>
Date: Mon, 30 Sep 2013 10:14:36 +0200
Subject: [PATCH] gio: add support for atomic file creation

Sometimes it is desirable to have the semantics of safe replace
also applied on file creation. This commit introduces a new flag
G_FILE_CREATE_ATOMIC that can be used with g_file_replace() so
that for local files the file content is written to a temporary
file which is then atomically renamed over the destinaton when
the stream is closed. This guarantees that the file is either
written completely or not at all. Before this change you only
got this behavior if the file already existed.

Signed-off-by: Sven Neumann <neumann@teufel.de>
---
 gio/gioenums.h               | 9 ++++++++-
 gio/glocalfileoutputstream.c | 6 ++++--
 2 files changed, 12 insertions(+), 3 deletions(-)

diff --git a/gio/gioenums.h b/gio/gioenums.h
index 4ce0855..97de166 100644
--- a/gio/gioenums.h
+++ b/gio/gioenums.h
@@ -202,13 +202,20 @@ typedef enum {
  *    You can think of it as "unlink destination" before
  *    writing to it, although the implementation may not
  *    be exactly like that. Since 2.20
+ * @G_FILE_CREATE_ATOMIC: Try to create the file atomically,
+ *    so it is either written completely or not at all.
+ *    For a local file this means that a temporary file
+ *    is created which is then atomically renamed over the
+ *    the destination when the stream is closed.
+ *    For a remote file the behaviour is undefined. Since 2.39.
  *
  * Flags used when an operation may create a file.
  */
 typedef enum {
   G_FILE_CREATE_NONE    = 0,
   G_FILE_CREATE_PRIVATE = (1 << 0),
-  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
+  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1),
+  G_FILE_CREATE_ATOMIC = (1 << 2)
 } GFileCreateFlags;
 
 /**
diff --git a/gio/glocalfileoutputstream.c b/gio/glocalfileoutputstream.c
index 6504472..844e621 100644
--- a/gio/glocalfileoutputstream.c
+++ b/gio/glocalfileoutputstream.c
@@ -1099,9 +1099,11 @@ _g_local_file_output_stream_replace (const char        *filename,
     open_flags |= O_RDWR;
   else
     open_flags |= O_WRONLY;
-  fd = g_open (filename, open_flags, mode);
 
-  if (fd == -1 && errno == EEXIST)
+  if (! (flags & G_FILE_CREATE_ATOMIC))
+    fd = g_open (filename, open_flags, mode);
+
+  if ((flags & G_FILE_CREATE_ATOMIC) || (fd == -1 && errno == EEXIST))
     {
       /* The file already exists */
       fd = handle_overwrite_open (filename, readable, etag,
-- 
1.8.1.2

