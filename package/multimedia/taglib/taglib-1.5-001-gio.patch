diff -ur taglib-1.5-orig/ConfigureChecks.cmake taglib-1.5/ConfigureChecks.cmake
--- taglib-1.5-orig/ConfigureChecks.cmake	2008-01-11 01:56:23.000000000 +0100
+++ taglib-1.5/ConfigureChecks.cmake	2009-04-22 19:39:16.000000000 +0200
@@ -10,6 +10,7 @@
 include(CheckLibraryExists)
 include(CheckTypeSize)
 include(CheckCXXSourceCompiles)
+include(FindPkgConfig)
 
 #check for libz using the cmake supplied FindZLIB.cmake
 FIND_PACKAGE(ZLIB)
@@ -20,6 +21,8 @@
 	SET(HAVE_ZLIB 0)
 ENDIF(ZLIB_FOUND)
 
+pkg_check_modules(GIO REQUIRED gio-2.0)
+
 SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
 FIND_PACKAGE(CppUnit)
 IF (NOT CPPUNIT_FOUND AND BUILD_TESTS)
diff -ur taglib-1.5-orig/taglib/CMakeLists.txt taglib-1.5/taglib/CMakeLists.txt
--- taglib-1.5-orig/taglib/CMakeLists.txt	2008-02-12 05:15:20.000000000 +0100
+++ taglib-1.5/taglib/CMakeLists.txt	2009-04-22 19:39:16.000000000 +0200
@@ -21,6 +21,9 @@
     INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
 endif(ZLIB_FOUND)
 
+INCLUDE_DIRECTORIES(${GIO_INCLUDE_DIRS})
+
+
 ADD_SUBDIRECTORY( toolkit )
 ADD_SUBDIRECTORY( mpeg )
 ADD_SUBDIRECTORY( ogg )
@@ -145,6 +148,8 @@
 	TARGET_LINK_LIBRARIES(tag ${ZLIB_LIBRARIES})
 endif(ZLIB_FOUND)
 
+TARGET_LINK_LIBRARIES(tag ${GIO_LIBRARIES})
+
 SET_TARGET_PROPERTIES(tag PROPERTIES
         VERSION ${TAGLIB_LIB_MAJOR_VERSION}.${TAGLIB_LIB_MINOR_VERSION}.${TAGLIB_LIB_PATCH_VERSION}
         SOVERSION ${TAGLIB_LIB_MAJOR_VERSION}
diff -ur taglib-1.5-orig/taglib/toolkit/tfile.cpp taglib-1.5/taglib/toolkit/tfile.cpp
--- taglib-1.5-orig/taglib/toolkit/tfile.cpp	2008-02-21 01:43:14.000000000 +0100
+++ taglib-1.5/taglib/toolkit/tfile.cpp	2009-04-22 19:39:16.000000000 +0200
@@ -49,6 +49,148 @@
 # define W_OK 2
 #endif
 
+#define USE_GIO 1
+
+#if USE_GIO
+
+#include <glib.h>
+#include <gio/gio.h>
+
+namespace FILE_IO
+{
+  struct GIOFile
+  {
+    GFile *file;
+    GFileInputStream* stream;
+  };
+
+  typedef GIOFile tFile;
+
+  tFile *open(const char *uri, const char*)
+  {
+    GIOFile *ret = new GIOFile;
+    ret->file = g_file_new_for_uri(uri);
+    ret->stream = g_file_read(ret->file, NULL, NULL);
+    return ret;
+  }
+
+  void close(tFile *file)
+  {
+    g_object_unref(file->stream);
+    g_object_unref(file->file);
+    delete file;
+  }
+
+  size_t read(void *ptr, size_t size, size_t count, tFile *file)
+  {
+    gsize numBytes = 0;
+    g_input_stream_read_all((GInputStream*)file->stream, ptr, size * count, &numBytes, NULL, NULL);
+    if(numBytes >= 0) return numBytes;
+    return 0;
+  }
+
+  size_t write(const void *, size_t, size_t, tFile *)
+  {
+    g_assert(false);
+    return 0;
+  }
+
+  void seek(tFile *file, long int offset, int origin)
+  {
+    GSeekType type = G_SEEK_CUR;
+    if(origin == SEEK_SET) type = G_SEEK_SET;
+    else if(origin == SEEK_END) type = G_SEEK_END;
+    g_seekable_seek((GSeekable*)file->stream, offset, type, NULL, NULL);
+  }
+
+  long int tell(tFile *file)
+  {
+    long int pos = g_seekable_tell((GSeekable*)(file->stream));
+    if(pos < 0) return pos = 0;
+    return pos;
+  }
+
+  void truncate(tFile *, size_t)
+  {
+    g_assert(false);
+  }  
+
+  void clearerr(tFile *)
+  {
+  }
+
+  size_t length(tFile *file)
+  {
+    long curpos = tell(file);
+    seek(file, 0, SEEK_END);
+    long endpos = tell(file);
+    seek(file, curpos, SEEK_SET);
+    return endpos;
+  }
+}
+
+#else
+
+namespace FILE_IO
+{
+  typedef char tChar;
+  typedef FILE tFile;
+
+  tFile *open(const tChar *uri, const wchar* mode)
+  {
+    return fopen(uri, mode);
+  }
+
+  void close(tFile *file)
+  {
+    fclose(file);
+  }
+
+  size_t read(void *ptr, size_t size, size_t count, tFile *file)
+  {
+    fread(ptr, size, count, file);
+  }
+
+  size_t write(const void *ptr, size_t size, size_t count, tFile *file)
+  {
+    fwrite(ptr, size, count, file);
+  }
+
+  void seek(tFile *file, long int offset, int origin)
+  {
+    fseek(file, offset, origin);
+  }
+
+  long int tell(tFile *file)
+  {
+    return ftell(file);
+  }
+
+  void truncate(tFile *file, size_t length)
+  {
+    ftruncate(fileno(file), length);
+  }  
+
+  void clearerr(tFile *file)
+  {
+    clearerr(file);
+  }
+
+  size_t length(tFile *file)
+  {
+    size_t l = 0;
+    GFileInfo* info = g_file_input_stream_query_info(file->stream, G_FILE_ATTRIBUTE_STANDARD_SIZE, NULL, NULL);
+    if(info)
+    {
+      l = g_file_info_get_size(info);
+      g_object_unref(info);
+    }
+    retrun l;
+  }
+}
+#endif
+
+
 using namespace TagLib;
 
 #ifdef _WIN32
@@ -70,7 +211,7 @@
 public:
   FilePrivate(FileName fileName);
 
-  FILE *file;
+  FILE_IO::tFile *file;
 
   FileNameHandle name;
 
@@ -107,12 +248,12 @@
 
 #endif
 
-  file = fopen(name, "rb+");
+  file = FILE_IO::open(name, "rb+");
 
   if(file)
     readOnly = false;
   else
-    file = fopen(name, "rb");
+    file = FILE_IO::open(name, "rb");
 
   if(!file)
     debug("Could not open file " + String((const char *) name));
@@ -130,7 +271,7 @@
 File::~File()
 {
   if(d->file)
-    fclose(d->file);
+    FILE_IO::close(d->file);
   delete d;
 }
 
@@ -156,8 +297,10 @@
   }
 
   ByteVector v(static_cast<uint>(length));
-  const int count = fread(v.data(), sizeof(char), length, d->file);
+  const int count = FILE_IO::read(v.data(), sizeof(char), length, d->file);
+
   v.resize(count);
+
   return v;
 }
 
@@ -171,7 +314,7 @@
     return;
   }
 
-  fwrite(data.data(), sizeof(char), data.size(), d->file);
+  FILE_IO::write(data.data(), sizeof(char), data.size(), d->file);
 }
 
 long File::find(const ByteVector &pattern, long fromOffset, const ByteVector &before)
@@ -385,7 +528,7 @@
   // That's a bit slower than using char *'s so, we're only doing it here.
 
   seek(readPosition);
-  int bytesRead = fread(aboutToOverwrite.data(), sizeof(char), bufferLength, d->file);
+  int bytesRead = FILE_IO::read(aboutToOverwrite.data(), sizeof(char), bufferLength, d->file);
   readPosition += bufferLength;
 
   seek(writePosition);
@@ -407,7 +550,7 @@
     // to overwrite.  Appropriately increment the readPosition.
 
     seek(readPosition);
-    bytesRead = fread(aboutToOverwrite.data(), sizeof(char), bufferLength, d->file);
+    bytesRead = FILE_IO::read(aboutToOverwrite.data(), sizeof(char), bufferLength, d->file);
     aboutToOverwrite.resize(bytesRead);
     readPosition += bufferLength;
 
@@ -421,7 +564,7 @@
     // writePosition.
 
     seek(writePosition);
-    fwrite(buffer.data(), sizeof(char), buffer.size(), d->file);
+    FILE_IO::write(buffer.data(), sizeof(char), buffer.size(), d->file);
     writePosition += buffer.size();
 
     // Make the current buffer the data that we read in the beginning.
@@ -452,7 +595,7 @@
 
   while(bytesRead != 0) {
     seek(readPosition);
-    bytesRead = fread(buffer.data(), sizeof(char), bufferLength, d->file);
+    bytesRead = FILE_IO::read(buffer.data(), sizeof(char), bufferLength, d->file);
     readPosition += bytesRead;
 
     // Check to see if we just read the last block.  We need to call clear()
@@ -462,7 +605,7 @@
       clear();
 
     seek(writePosition);
-    fwrite(buffer.data(), sizeof(char), bytesRead, d->file);
+    FILE_IO::write(buffer.data(), sizeof(char), bytesRead, d->file);
     writePosition += bytesRead;
   }
   truncate(writePosition);
@@ -497,25 +640,25 @@
 
   switch(p) {
   case Beginning:
-    fseek(d->file, offset, SEEK_SET);
+    FILE_IO::seek(d->file, offset, SEEK_SET);
     break;
   case Current:
-    fseek(d->file, offset, SEEK_CUR);
+    FILE_IO::seek(d->file, offset, SEEK_CUR);
     break;
   case End:
-    fseek(d->file, offset, SEEK_END);
+    FILE_IO::seek(d->file, offset, SEEK_END);
     break;
   }
 }
 
 void File::clear()
 {
-  clearerr(d->file);
+  FILE_IO::clearerr(d->file);
 }
 
 long File::tell() const
 {
-  return ftell(d->file);
+  return FILE_IO::tell(d->file);
 }
 
 long File::length()
@@ -528,15 +671,8 @@
   if(!d->file)
     return 0;
 
-  long curpos = tell();
-
-  seek(0, End);
-  long endpos = tell();
-
-  seek(curpos, Beginning);
-
-  d->size = endpos;
-  return endpos;
+  d->size = FILE_IO::length(d->file);
+  return d->size;
 }
 
 bool File::isWritable(const char *file)
@@ -555,7 +691,7 @@
 
 void File::truncate(long length)
 {
-  ftruncate(fileno(d->file), length);
+  FILE_IO::truncate(d->file, length);
 }
 
 TagLib::uint File::bufferSize()
