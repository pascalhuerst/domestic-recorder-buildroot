--- taglib-1.5/taglib/toolkit/tbytevector.cpp	2010-01-05 14:57:18.000000000 +0100
+++ taglib-1.5/taglib/toolkit/tbytevector.cpp	2010-01-07 11:01:13.000000000 +0100
@@ -29,6 +30,7 @@
 #include <tdebug.h>
 
 #include <string.h>
+#include <list>
 
 #include "tbytevector.h"
 
@@ -426,88 +428,73 @@
 
 ByteVector &ByteVector::replace(const ByteVector &pattern, const ByteVector &with)
 {
-  if(pattern.size() == 0 || pattern.size() > size())
+  if (pattern.size() == 0 || pattern.size() > size())
     return *this;
 
-  const int originalSize = size();
   const int patternSize = pattern.size();
   const int withSize = with.size();
 
-  // Count the number of matches first
-  int matches = 0;
-  int pos = find(pattern);
-  int prevPos = pos;
-  while(pos >= 0) {
-    matches++;
-    pos = find(pattern, pos + patternSize);
-  }
+  int offset = find(pattern);
 
-  if (matches == 0)
-    return *this;
-  else if (matches == 1) {
-    // Fast track for a common case
-    if(withSize > patternSize)
-      resize(originalSize + withSize - patternSize);
+  // try to not allocate memory for short buffers or seldom patterns
+  const size_t numDefaultStorageFields = 1024;
+  size_t defaultStorageForPatternPositions[numDefaultStorageFields];
 
-    if(patternSize != withSize)
-      ::memmove(data() + prevPos + withSize, data() + prevPos + patternSize, originalSize - prevPos - patternSize);
+  // be prepared for any number of patterns
+  typedef std::list<size_t> tPatternPositions;
+  tPatternPositions morePatternPositions;
 
-    if(withSize < patternSize)
-      resize(originalSize + withSize - patternSize);
+  size_t numPatternPositions = 0;
 
-    ::memcpy(data() + prevPos, with.data(), withSize);
-  }
-  else {
-    if(withSize > patternSize) {
-      // Data size will be increased after the replacement - resize the vector
-      // first and search then for the pattern starting from the end of the
-      // data (rfind). Move each unchanged block (from pos to prevPos) by offset
-      // bytes towards the end of the vector. First block found moves by
-      // (withSize - patternSize) * matches bytes, last one doesn't move at all.
-      int offset = (withSize - patternSize) * matches;
-
-      resize(originalSize + offset);
-
-      prevPos = offset;
-      pos = rfind(pattern, prevPos);
-      while (pos >= 0) {
-        ::memmove(data() + size() - pos + offset, data() + size() - pos, prevPos - pos);
-        ::memcpy(data() + size() - prevPos + offset, with.data(), withSize);
-        offset -= withSize - patternSize;
-        prevPos = pos + patternSize;
-        pos = rfind(pattern, prevPos);
-      }
+  while (offset >= 0)
+  {
+    if(numPatternPositions < numDefaultStorageFields)
+    {
+      defaultStorageForPatternPositions[numPatternPositions] = offset;
     }
-    else {
-      // Data size will be decreased after the replacement or stays the same -
-      // move data first, resize then. Search for the pattern and move each
-      // unchanged block (from prevPos to pos) by -offset bytes towards the
-      // start of the vector (value of offset variable is negative). First block
-      // found doesn't move at all, last one has to move by
-      // (withSize - patternSize) * matches bytes.
-      int offset = 0;
-
-      prevPos = 0;
-      pos = find(pattern, prevPos);
-      while (pos >= 0) {
-        if (offset && patternSize != withSize)
-          ::memmove(data() + prevPos + offset, data() + prevPos, pos - prevPos);
-        ::memcpy(data() + pos + offset, with.data(), withSize);
-        prevPos = pos + patternSize;
-        offset += withSize - patternSize;
-        pos = find(pattern, prevPos);
-      }
+    else
+    {
+      morePatternPositions.push_back(offset);
+    }
+    numPatternPositions++;
+    offset = find(pattern, offset + patternSize);
+  }
 
-      // Move last block as well, goes from end of last match to end of data.
-      if (patternSize != withSize) {
-        pos = originalSize;
-        offset += withSize - patternSize;
-        ::memmove(data() + prevPos + offset, data() + prevPos, pos - prevPos);
-      }
+  if(numPatternPositions)
+  {
+    // we already know the resulting buffers size, so allocate it
+    size_t newBuffersSize = size() + (withSize - patternSize) * numPatternPositions;
+    ByteVector result(newBuffersSize);
+
+    size_t readPos = 0;
+    size_t writePos = 0;
+
+    tPatternPositions::const_iterator itPos = morePatternPositions.begin();
+
+    for (int i = 0; i < numPatternPositions; i++)
+    {
+      int patternPos = (i < numDefaultStorageFields) ? defaultStorageForPatternPositions[i] : *(itPos++);
 
-      if (patternSize != withSize)
-        resize(originalSize + offset);
+      // copy stuff between patterns
+      size_t numBytesInBetween = patternPos - readPos;
+      ::memcpy(result.data() + writePos, data() + readPos, numBytesInBetween);
+
+      readPos += numBytesInBetween;
+      writePos += numBytesInBetween;
+
+      // write the new pattern
+      ::memcpy(result.data() + writePos, with.data(), withSize);
+
+      // ignore the old pattern by advance the readPos
+      readPos += patternSize;
+      writePos += withSize;
     }
+
+    // copy the rest
+    ::memcpy(result.data() + writePos, data() + readPos, size() - readPos);
+
+    // swap the data of result with our own
+    std::swap(d, result.d);
   }
 
   return *this;
