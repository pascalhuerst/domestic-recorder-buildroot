=== modified file 'configure.ac'
--- a/configure.ac	2011-02-02 14:52:08 +0000
+++ b/configure.ac	2011-06-30 09:52:24 +0000
@@ -80,12 +80,6 @@
     ;;
 esac
 
-AC_CHECK_HEADER(libunwind.h,
-        UNWIND_LIBS="-lunwind-$TARGET_PLATFORM -lunwind",
-        AC_MSG_ERROR([
-*** libunwind header files missing ***]))
-AC_SUBST(UNWIND_LIBS)
-
 AC_ARG_ENABLE(profiling,
               [  --enable-profiling      enable optional profiling (default=no)])
 if test "x$enable_profiling" = "xyes"; then

=== modified file 'raumfeld.pc.in'
--- a/raumfeld.pc.in	2011-01-21 09:27:30 +0000
+++ b/raumfeld.pc.in	2011-06-30 09:55:33 +0000
@@ -11,5 +11,5 @@
 Description: a collection of Raumfeld stuff
 Version: @VERSION@
 Requires: gupnp-1.0 >= @GUPNP_REQUIRED_VERSION@ gupnp-av-1.0 >= @GUPNP_AV_REQUIRED_VERSION@ gio-2.0 >= @GLIB_REQUIRED_VERSION@ avahi-gobject >= @AVAHI_REQUIRED_VERSION@ dbus-glib-1 >= @DBUS_GLIB_REQUIRED_VERSION@ libssl
-Libs: -L${libdir} -lraumfeld-@RAUMFELD_API_VERSION@ @ARCHIVE_LIBS@ @UNWIND_LIBS@
+Libs: -L${libdir} -lraumfeld-@RAUMFELD_API_VERSION@ @ARCHIVE_LIBS@
 Cflags: -I${includedir}/raumfeld-@RAUMFELD_API_VERSION@ @RAUMFELD_PROFILING_FLAGS@

=== modified file 'raumfeld/trace/Makefile.am'
--- a/raumfeld/trace/Makefile.am	2011-01-21 09:27:30 +0000
+++ b/raumfeld/trace/Makefile.am	2011-06-30 09:56:24 +0000
@@ -18,8 +18,6 @@
 	profiling.c	\
 	profiling.h	\
 	report.c	\
-	symbols.c	\
-	symbols.h	\
 	trace.c
 
-libtrace_la_LIBADD = $(GLIB_LIBS) $(SOUP_LIBS) $(UNWIND_LIBS)
+libtrace_la_LIBADD = $(GLIB_LIBS) $(SOUP_LIBS)

=== modified file 'raumfeld/trace/trace.c'
--- a/raumfeld/trace/trace.c	2010-10-14 20:04:36 +0000
+++ b/raumfeld/trace/trace.c	2011-06-30 10:15:28 +0000
@@ -9,10 +9,10 @@
 #include <dlfcn.h>
 
 #include <stdlib.h>
+#include <stdio.h>
 #include <string.h>
 
-#define UNW_LOCAL_ONLY
-#include <libunwind.h>
+#include <execinfo.h>
 
 #include <glib.h>
 
@@ -23,104 +23,51 @@
 #include "report.h"
 
 
-#define TRACE_UNWIND_MAX_DEPTH  50
-
-
-static GStaticMutex unwindMutex = G_STATIC_MUTEX_INIT;
+static GStaticMutex backtraceMutex = G_STATIC_MUTEX_INIT;
 static gboolean s_isInitialized = FALSE;
 static gboolean s_isEnabled     = FALSE;
 
 
-static const gchar *
-getLocation(void *addr)
-{
-  Dl_info info;
-
-  if (dladdr(addr, &info))
-    {
-      if (info.dli_fname && strlen (info.dli_fname))
-        return info.dli_fname;
-    }
-
-  return NULL;
-}
-
 static void
-logUnwind(GString *str, unw_context_t *ctx)
+logBacktrace(GString *str)
 {
-  unw_context_t  context;
-  unw_cursor_t   cursor;
-  int            ret;
-  int            depth = 0;
+  int    nptrs = 0;
+  void  *buffer[100];
+  char **strings;
 
-  g_static_mutex_lock (&unwindMutex);
+  g_static_mutex_lock (&backtraceMutex);
 
   logBegin(str, "CALLSTACK");
 
-
-  if(ctx == NULL)
-  {
-    ctx = &context;
-    unw_getcontext(ctx);
-  }
-
-  unw_init_local(&cursor, ctx);
-
-  do
-  {
-    char        name[128];
-    unw_word_t  valp;
-    unw_word_t  offset;
-
-    if (unw_get_reg(&cursor, UNW_REG_IP, &valp) != 0)
-      break;
-
-    if (unw_get_proc_name (&cursor, name, sizeof (name), &offset) == 0)
-    {
-      const gchar *location = getLocation((void *) (valp - offset));
-
-      if (location)
-        logLine(str, " 0x%08x  %s() from %s", valp - offset, name, location);
-      else
-        logLine(str, " 0x%08x  %s()", valp - offset, name);
-      }
-    else
-    {
-      const gchar *location = getLocation((void *) valp);
-
-      if (location)
-        logLine(str, " 0x%08x  ?? from %s", valp, location);
-      else
-        logLine(str, " 0x%08x  ??", valp);
-    }
-
-    ret = unw_step (&cursor);
-
-    if (ret < 0)
-    {
-      logLine(str, "FAILURE: unw_step() returned %d", ret);
-    }
-
-    if (depth++ > TRACE_UNWIND_MAX_DEPTH)
-    {
-      logLine(str, "FAILURE: unw_step() looping over %d iterations", depth);
-      break;
-    }
-  }
-  while (ret > 0);
+  nptrs = backtrace (buffer, G_N_ELEMENTS (buffer));
+  strings = backtrace_symbols (buffer, nptrs);
+
+  if (strings)
+  {
+    int j;
+
+    for (j = 0; j < nptrs; j++)
+      logLiteral(str, strings[j]);
+
+    free(strings);
+  }
+  else
+  {
+    perror("backtrace_symbols");
+  }
 
   logEnd(str, "CALLSTACK");
 
-  g_static_mutex_unlock (&unwindMutex);
+  g_static_mutex_unlock (&backtraceMutex);
 }
 
 static void
-reportCrash(void *ctx)
+reportCrash(void)
 {
   GString* str = g_string_new(NULL);
 
   logLiteral(str, "[LOG BEGIN (Crash)]\n");
-  logUnwind(str, ctx);
+  logBacktrace(str);
   logAspects(str, PUBLISH_INFO_ALL);
 
   if (profilingIsEnabled())
@@ -143,7 +90,7 @@
   logBegin(str, "REPORT");
   logLiteral(str, message && strlen (message) ? message : "<empty>");
   logEnd(str, "REPORT");
-  logUnwind(str, NULL);
+  logBacktrace(str);
   logAspects(str, PUBLISH_INFO_ALL);
   logLiteral(str, "\n[LOG END]");
 
@@ -165,7 +112,7 @@
 
   g_printerr("caught signal %d\n", sig);
 
-  reportCrash(ctx);
+  reportCrash();
 
   g_error("Program crashed.");
 }
@@ -230,7 +177,7 @@
 {
   GString *str = g_string_new(NULL);
 
-  logUnwind(str, NULL);
+  logBacktrace(str);
   g_printerr("%s\n", str->str);
   g_string_free(str, TRUE);
 }

=== modified file 'tests/Makefile.am'
--- a/tests/Makefile.am	2011-06-15 12:13:02 +0000
+++ b/tests/Makefile.am	2011-06-30 09:55:44 +0000
@@ -9,8 +9,7 @@
 RAUMFELD_TESTS_LDADD = \
 	$(top_builddir)/raumfeld/libraumfeld-@RAUMFELD_API_VERSION@.la	\
 	$(GUPNP_LIBS)							\
-	$(GLIB_LIBS)							\
-	$(UNWIND_LIBS)
+	$(GLIB_LIBS)
 
 TESTS = \
 	test-platform		\

=== modified file 'tools/Makefile.am'
--- a/tools/Makefile.am	2011-06-29 12:44:48 +0000
+++ b/tools/Makefile.am	2011-06-30 09:55:20 +0000
@@ -11,8 +11,7 @@
 RAUMFELD_TOOLS_LDADD = \
 	$(top_builddir)/raumfeld/libraumfeld-@RAUMFELD_API_VERSION@.la	\
 	$(GUPNP_LIBS)							\
-	$(GLIB_LIBS)							\
-	$(UNWIND_LIBS)
+	$(GLIB_LIBS)
 
 
 bin_PROGRAMS = \

