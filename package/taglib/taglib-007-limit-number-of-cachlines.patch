--- taglib-1.5/taglib/toolkit/tfile.cpp	2010-01-05 14:57:18.000000000 +0100
+++ taglib-1.5/taglib/toolkit/tfile.cpp	2010-01-07 11:17:56.000000000 +0100
@@ -68,11 +68,24 @@
   {
     enum
     {
-      CACHE_LINE_SIZE = 1024 * 16
+      CACHE_LINE_SIZE = 1024 * 16,
+      MAX_NUM_CACHE_LINES = 16
     };
 
     struct CacheLine
     {
+      static int numLines;
+
+      CacheLine()
+      {
+        g_atomic_int_inc(&numLines);
+      }
+
+      ~CacheLine()
+      {
+        g_atomic_int_dec_and_test(&numLines);
+      }
+
       char buffer[CACHE_LINE_SIZE];
     };
 
@@ -87,12 +100,20 @@
     ~GIOFile()
     {
       tCache::iterator it = cache.begin();
+
+      g_static_mutex_lock(&s_pool_cs);
+
       for (; it != cache.end(); ++it)
       {
-        g_static_mutex_lock (&s_pool_cs);
+        if (s_pool.size() >= MAX_NUM_CACHE_LINES)
+        {
+          break;
+        }
+
         s_pool.push_back(it->second);
-	 g_static_mutex_unlock (&s_pool_cs);
       }
+
+      g_static_mutex_unlock(&s_pool_cs);
     }
 
     int getCacheLinePos(int filePos)
@@ -103,6 +124,9 @@
 
     void aquire(int where, int len)
     {
+      int origWhere = where;
+      int origLen = len;
+
       int lastSeekedPos = -1;
 
       while (len > 0)
@@ -117,11 +141,32 @@
 
           tCacheLinePtr line;
 
-	   g_static_mutex_lock (&s_pool_cs);
+          g_static_mutex_lock(&s_pool_cs);
 
           if (s_pool.empty())
           {
-            line = tCacheLinePtr(new CacheLine);
+            // try to find a cache line we can use:
+            tCache::iterator it = cache.begin();
+            for (; it != cache.end(); ++it)
+            {
+              int wantedS = origWhere;
+              int wantedE = origWhere + origLen;
+
+              int havingS = it->first;
+              int havingE = it->first + CACHE_LINE_SIZE;
+
+              if (wantedE < havingS || havingE < wantedS)
+              {
+                line = it->second;
+                cache.erase(it);
+                break;
+              }
+            }
+
+            if (!line)
+            {
+              line = tCacheLinePtr(new CacheLine);
+            }
           }
           else
           {
@@ -145,6 +195,11 @@
 
     int read(int len, char *buf)
     {
+      if (seekPos >= length)
+      {
+        return 0;
+      }
+
       int cacheLinePos = getCacheLinePos(seekPos);
       int overhead = seekPos - cacheLinePos;
       aquire(cacheLinePos, len + overhead);
@@ -177,6 +232,7 @@
     static GStaticMutex s_pool_cs;
   };
 
+  int GIOFile::CacheLine::numLines = 0;
   GIOFile::tCacheLinePool GIOFile::s_pool;
   GStaticMutex GIOFile::s_pool_cs = G_STATIC_MUTEX_INIT;
 
